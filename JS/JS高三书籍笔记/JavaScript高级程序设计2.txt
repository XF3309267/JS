1.  面向对象的程序设计 （第六章）
	a. 属性特性
		ECMA-262 第 5 版在定义只有内部才用的特性（默认特性），在JavaScript中不能直接访问		
		为了表示特性是内部值，规范把他们放在方括号中。
		ECMAScript 中有两种属性： 数据属性 和 访问器属性
	    a-1  数据属性
	 	[[Configurable]]: 	
		 	表示 能否通过 delete 删除从而重新定义属性，能否修改属性的				
			特性或者能否把属性修改为访问器属性。一般未修改的情况下为 true。
		[[Enumerable]]: 	
			表示能否使用 for-in 循环返回属性。一般未修改的情况下true
		[[Writeable]]:		
			能否修改属性的值， 默认为 true
		[[Value]]:		
			包含这个属性的数据值。读取时，从该位置读取，写入时也是。默认 undefined
	    a-2  修改属性默认的特性
		方法： Object.defineProjperty() ,接受三个参数：
		属性所在对象  
		属性的名字 
		描述符对象：该对象属性必须是： configurable 、enumerable、writable、value
		例子：
			var person = {};
			Object.defineProperty(person,"name",{
				writable: false,    // 设置为不能更改
				value:  "Nicholas"
			});
			alert(person.name);    	// "Nicholas"
			person.name = "Greg";
			alert(person.name);	//  "Nicholas"
		// 非严格模式下指定新值，会被忽略
		// 严格模式下会导致错误
		例子（接着上面的语句）:
			 Object.defineProperty(person,"name",{
				configurable:	 false,    // 设置为不能删除
				value:  	"Nicholas"
			});
			delete person.name;	//  无效
		// 非严格模式下指定新值，会被忽略
		// 严格模式下会导致错误
		// 一旦把属性定义为不可配置的，就不能再把它变回可配置
		// 就算把再来一次将其  configurable 设置为： "true",也没用
	    a-3  访问器属性  （即由 Object.defineProperty 创建的属性）	
		访问器属性不能直接定义，必须使用  Object.defineProperty() 来定义
		访问器属性不含数据值，它包含一对 getter  和 setter 函数（这两个函数都不是必需的）
				
		访问器属性有 4 个特性：
		[[Configurable]]
		[[Enumerable]]
		[[Get]]: 读取属性时调用函数，  默认值为：undefined
		[[Set]]：写入属性时调用函数。  默认值为：undefined

		1.一般在创建对象属性时，在变量面前加一个下划线，以表示该属性只能通过对象访问的属性
		2.读取属性时调用 getter，写入时调用 setter
		例子：
			var book = {
				_year: 	2004,
				edition:1			
				};
			Object.defineProperty(book,"year",{
				get: function(){
					return this._year;
				// 对于 1 所总结的，表示很不懂，“只能”？访问器中函数也能访问
				},	
				set: function(newvalue){  // set的函数必须是有参数，不然无法写入
					if(newvalue > 2004){
					   this._year = newvalue;
					   this.deition +=newvalue  - 2004;
					}
				}
				});
			book.year = 2005; 
			alert(book.edition);
		3. 对于访问器属性不一定同时指定 getter 和 setter 函数。如果只指定 getter ，就不能
		   写入，尝试写入会被忽略（非严格模式下）、抛出错误（严格模式下）
		   如果只指定 setter 就不能获取，获取会为 undefined
	    a-4  创建访问器属性一般使用两个非标准的方法：
		   	_defineGetter_()  
				book._defineGetter_("year",function(){
					return this_year;
				});
			_defineSetter_()
				book._defineSetter_("year",function(){
					........
				})

	    a-5  定义多个属性
		defineProperties() 方法
		（高三 p142）
	
	    a-5  读取属性的特性
		Object.getOwnPropertyDescriptor() 方法
		接收两个参数： 1.  属性所在对象		2. 要读取其描述符的属性名称
		访问器属性有： configurable、 enumerable、 get 、set
		数据属性有：   configurable、 enumerable、 writeable、value
		例子：
			var book ={};
			Object.defineProperties(book,{
			     _year:{
				value: 2004
				},
			     edition:{
				value: 1
				},
			      year:{
				get:function(){
					return this.year
				},
				set:function(newvalue){
					.......
				}
				}
				

			});
			var descriptor = Object.get OwnPropertyDescriptor(book,"_year"); 
			//  获取的是 数据属性，所以不能访问其没有的属性（如：get  set）
	b. 创建对象
	    b-1   工厂模式
		function create(name,age,job){
			var o = new Object()；
			o.name = name；
			....
			o.sayName = function(){
				alert(this.name);
			}
			retturn o;
			}
		var obj = create("Jack",29,"Software");
	    b-2   构造函数模式
		fucntion Person(name,age,job){  //构造函数首字母大写
				this.name = name；
				.....
				this.sayName = function(){..}
			}
		// 与 工厂模式 比较
		   没有显示创建对象
		   直接将属性和方法赋给  this 对象
		   没有return语句
	  	
		使用构造函数创建实例，必须使用 new 操作符，会经历下面 4 个步骤：
		1）创建一个新对象
		2）将构造函数的作用域赋给新对象（ this 就指向这个新对象）
		3）执行构造函数中的代码（一般是添加属性 和 方法）
		4）返回新对象
		
		 对象都带有 constructor(构造函数)属性，能返回创建该实例的构造函数
		 实例(a)   instanceof  构造函数(b)  （检测 实例a 的构造函数是否 构造函数b）
		
		{
			typeof 检测只会返回：
			"number"、"string"、"boolean"、"object"、  "function"   和 "undefined"。
			
			且typeof检测 引用类型都返回 Object 

			https://www.cnblogs.com/Trr-984688199/p/6180040.html
			//  直接单独使用未声明的变量会报错,而使用 typeof 检测 未声明的变量 会返回  undefined
        		//  
        		//  声明 且未赋值的 变量，可以直接使用 且值为 undefined, 使用 typeof 返回 undefined
        		//
        		//  若变量值为 null ， 变量   >>  null      typeof  变量  >>  null
									}
	*********	将构造函数当作函数
			任何函数，只要通过 new 操作符来调用，他就可以作为构造函数
			任何函数，不通过 new 操作符来调用，就和普通函数一样
		例子:
			//    b-2 中的Person
			Person("Jack",26,"software");
			//  在全局中调用函数 this 对象总是指向 Global 对象（浏览器中指的时 window 对象）
			//  所以可以使用  window.sayName();  方法
			//  也可以使用  call()  或  apply() 方法 在其他域中使用该方法
			var   o  = new Object();
			Person.call(o,"Bob",34,"Policeman");
			o.sayName();    //  Bob 
	*********	构造函数的问题
			函数即 对象，因此每定义一个函数，就实例化一个对象
			每个 Person 实例都包含一个不同的 function 实例，该种方式创建函数会导致不同的作用域
				和 标识符解析，但创建函数的机制是一样的。
			为了解决上述的问题：
				将函数放置全局当中，而构造函数内部只用一个变量用来承接
				因为函数中使用的是  this 对象，所以该函数只能在实例中使用，而不能单独使用
	    b-2   原型模式
		每一个函数都有一个 prototype 原型对象，
		原型对象的用途是包含  可以 由特定类型的所有实例  共享的 属性和方法
		
		//  实例的属性和方法是共享的 ，就因为 这些属性和方法 创建在 原型上。
		person1.sayName()  ==  person2.sayName();     //  true
	         理解原型对象
	***	只要创建函数，就会为函数创建一个 prototype 属性 指向 函数的原型对象。
		而使用构造函数创建的对象实例 有一个指向  prototype属性的指针  [[Prototype]]
			错误：  person1.prototype   ===  Person.prototype
  		但在脚本中没有标准的方式访问  [[Prototype]],但有些 浏览器在每个对象上都支持一个属性  __proto__
		__proto__  用于实例对象访问  原型对象，而构造函数使用  prototype 就可访问原型对象

	 ********* //  为什么只有 当 Person()  构造函数创建了实例
        		//    Person.prototype              才会显示全部属性值

	**********默认情况下，原型对象都会自动获得一个 constructor  属性，
		指向  prototype 属性 所在的函数。（解释：拥有该原型对象的 函数）



	**********  对于  person1   person2   Person（Person 为 构造函数，person1 person2 对象实例）
		 Person.prototype       指向   Person 构造函数 的原型对象
		 person1.prototype     指向    Person.prototype
	**********   isPrototypeOf()  方法，	用以检测对象的  prototype 是否指向调用对象，如：
		  Person.prototype.isPrototypeof(person1);     // true
	**********  getPrototypeOf()  		用以获取这个对象的原型，  如：
		Object.getPrototypeOf(person1)   == Person.prototype ;    //  true
		Object.getPrototypeOf(person1) .name  =  "Jack";
	*********    查找对象的属性时，会现在  实例中寻找，后向原型中寻找，后再向原型的原型寻找，直到找到为止。
	         属性和方法 的增删改查
		a.  在对象实例中添加属性，若与   原型对象的 变量有 重名，则会实现覆盖。除非该对象实例中无该变量名，
		     可使用   delete  person1.name ;    将实例中同名的属性删除，才会与原型的属性（之前的同名的属性） 相连接
		b.  hasOwnProperty()  
			检测 给定属性是否在该对象的实例中，如：
		    	var  person1.name  =  "Lisa";
			person1.hasOwnProperty("name");	//  true
	         原型 与 in 操作符
		a.    for - in
		b.    alert("name"  in  person1);   //  检测对象中是否有该属性（无论是在原型上  还是对象实例上）
		c.     function   hasPrototypeProperty(object ,name){
			return   !object.hasOwnPeoperty(name)  && (name   in   object);
			//    object   中有  name  属性 就返回  true
			//   实例对象中含有 name  属性，就返回  true，且再反一下  false
			//  即   object 存在的属性，且该属性在  原型对象上 时，返回  true
			//   ***************     对象实例上的属性  可以覆盖原型上的属性    ******** 
			//  其余情况下返回  false
			}
		d.   IE  早期版本有一个bug
			var  o = {
				toString:  function(){
					return   "My  Object";	
				}
			};
			for(var pro in o ){
				if(prop ==  "toString"){
					alert("");    	//  在IE中不会显示
				}
					}
			上述例子重写  toString  方法  ，因为 默认  toString 方法  [[Enumerable]]  为false，
			即不可进行 for 循环而枚举
			该 bug  也会 影响：  hasOwnProperty()     peopertyEnumerable()  等方法
		
			ECMAScript5  也将 constructor 和prototype属性的[[Enumerable]] 特性设置为 false，但
			不是所有浏览器都是如此。			
		e.   Object.keys()  方法
			该方法接受一个对象为参数，返回一个包含所有可枚举属性的字符串数组
			var  person3 = new  Person();
			person3.name = "Rob";
			person3.age = 34;
			var p3Keys = Object.keys(person3);
			//  peKeys  >>  "name, age"

			var  allKeys  =  Object.keys(Person.prototype);  // 与书上不符，P54
			//
		      Object.getOwnPropertyNames();   
			该方法接受一个对象为参数，返回一个包含所有属性的字符串数组(无论是否可枚举)
			var   keys  = Object.getOwnPropertyNames(person.prototype);
			//   与书中的不符      有待探讨
	    b-3   更简单的原型方法
		function  Person(){};
		Person.prototype = {
		      //   本质上完全重写了 默认的  prototype  对象，所以  constructor  会指向新对象的   构造函数
		      //   虽然    person1   instanceOf  Person   为  true	
		      //   但   person1.constructor  == Person  为false  ， 不能确定对象类型
		      //   constructor:  Person,
		       name:   "Nicholas",
		        age:   29,
		        job:   "man",
		        sayName:  function() {
			alert(this.name);
			}
		}	
		不过  Person.prototype 的 constructor 不指向  Person
		再加上一句 ：   constructor:  Person. 就会重新指向  Person
		不过 会导致  Person.prototype 的 [[Enumberable]] 设置为  true
		

		//  兼容  ECMAScript  的浏览器 才可以将  Person.prototype 的 [[Enumberable]] 设置为  false
		Object.defineProperty(Person.prototype,  "constructor",{
			enumerable: false,
			value:  Person
			});
	c.   继承问题
		1.  如何编写一个 类 （构造函数）
			方法写之  其原型上
			属性写在  构造函数里
		（a: 可以将方法写在构造函数里，但是每次创建一个实例都会创建一个新对象（因为函数就是对象））
		（b: 可以将属性写在其原型上，但属性中可能就有数组或其他引用类型的值，会导致属性共享
		     （即 其创建的实例共享这个引用属性））
		（c:  ）
		2.  对于上述的的构造函数的继承
		  a:  原型式模式
			将 A的的实例对象  赋给  B，即 B 的 prototype 的拥有 A实例对象有的属性
			（包括：[[prototype]]  指向A 的原型函数
			             A 中拥有的属性（A 指的是一个构造函数）
			   ）
		     弊端： 
		          1.  原型式继承  实例 赋给 原型，会将构造函数中的属性 赋给 原型，那就有可能包括 引用类型数值
		          2.  在用B创建实例时，无法给  A 构造函数传递参数。或者在进行原型对象赋值时就传递参数，那
		 	B  所创建的实例属性都是一样的，这样 毫无意义
		
		b： 原型式继承  （当 继承对象 确定不需要继承了，仅仅只需要复制一份对象实例  可考虑使用该方法）
		         ******    使用 Object（original）方法 直接复制一份  original 对象，然后返回
		         ******    Object.create(original,{   属性的覆盖 或 添加  。。。 })，复制对象和修改对象属性，然后返回


			
			和原型模式是一样的，不过原型式继承有单独的函数用以实现  原型式继承，
			var  sub = Object.create(Super);
			     function   Object(o){   // o 为对象实例
				function  F(){}
				F.prototype = o;
				return new F();
			//   返回的是  F 构造函数的一个实例对象
			
			}

			或者：  var  sub  = Objcet(Super);
			但是  Object.create();可以：
			var sub = Object.create(Super,{
				name:  {
					value: "Bob";  // 可以额外设置属性
				}
				})
			弊端：  和原型模式一样，引用类型值 会出现  实例属性共享

  		c:  借用构造函数  （  一般不会用  ）
			在子类构造函数中使用  Super.call(this);   在子类构造函数的域中调用  Super 函数
			差不多意思是：  使用 子类构造函数 也可创建  Super可创建的 实例，只是换了个名字，
			且只会获得 Super 构造函数中的属性
		         弊端：  上面也说了， 只会获得  构造函数中的属性。所以只有  Super 的属性和方法都放在构造函数中
			      子类型  才可以说是 继承了  Super类型。但方法写在构造函数中，又会出现重复创建函数对象。

		d:  寄生式构造函数模式
			使用一个函数封装创建对象的代码 ，如下：
				function Person(name){
				   	var  o = new Object();
					o.name = name;
					o.sayName = function(){
						alert(this.name);
						}
					return  o;
					}
		e:  寄生式继承
			使用一个函数接收original对象，后5包裹  原型式继承，并在函数中对要返回的对象加以方法

			和寄生式构造函数模型一样的思路，将构造函数封装起来，如下：
			function  createAnother(original){
				var clone =   Object(original);
				//    将  original 实例赋给  clone 原型 

				clone.sayHi = function(){
					alert("hi");
					}
				return clone;
				//  注意 返回的是  实例对象
			}
		弊端：  使用了 Object()  原型模式的方法，引用类型的属性值会在实例中共享		

		f:   寄生组合式继承  
		    *******  在子类构造函数中使用  父类的 call()  方法（也可传递参数），将 父类构造函数中的属性赋给
			了  子类构造函数（其实是  子类调用父类的构造函数）。这一系列操作： 父类构造函数说拥有的
			子类也有
		    *******  function inheritPrototype(subType,superType){
				var  prototype = Object(superType,prototype);
				prototype.constructor = subType;
				subType.prototype = prototype;
			}//  将父类原型  赋给  子类原型 
		总结：  寄生组合式继承，
		             Sub 构造函数属性 	 仅仅继承  Super 构造函数属性
		             Sub  构造函数原型属性	 仅仅继承   Super构造函数原型的属性 
		             在原型链中完完全全复制了一份 构造函数，两者是等价的，只是名字不同而已

		      适用于： 子类不知道是否会进行对其他类型进行继承，而且要求 父类的构造函数 属性与方法的分明，
			    父类原型不是 其他类型的对象实例赋值而来  （因为实例对象赋值给原型，难免会将实例对象
			     的引用类型值赋给原型，而出现 实例属性共享）

	
			    
			    
		         






		







			

		
















     







   













		





			
		
		