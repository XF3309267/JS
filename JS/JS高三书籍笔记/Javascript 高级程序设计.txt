  4   1.  标签的位置
	A.  通常外部文件的引用都放在 </body>标签前面，避免在加载脚本文件时 界面一片空白
	B.  为 <script> 标签定义 defer 属性， 告诉浏览器先下载后执行. 
	     defer 属性只适用于外部脚本文件，在  HTML5  中会忽略 嵌入式脚本 设置的defer属性，
	     IE4 至 IE7 还支持嵌入脚本的的defer属性（仍然放置文本底部）
	C.  为... 定义  async，与  defer  类似，只适用于外部文件， 并告诉浏览器立即下载文件，
		但并不按照顺序执行，所以两者之间的 互不依赖 非常重要。           
		 async 属性目的是不让页面等待脚本的下载和执行 从而异加载内容。
		异步脚本 在 load 事件前执行，但可能在  DOMContentLoaded 事件触发之前或之后执行。
2.  object 类型
	A.  创建 object 实例方法
		1.   var obj = new Object();  		 Object  构造函数 
		2.   var obj = { name:"Jack",age: 29};	对象字面量，在于 简化创建大量属性的对象的过程
		      age  是该对象的最后一个属性，其后不能加 逗号（在IE7 更早版本和 Opera会出现错误）
		3.  var obj = { 5：true };  	属性名 5 会自动转化为 字符串。
		4.   在函数许多个参数时， 可：  
			function example（args）{
				if(typeof   args.name == "string"){.......}  检测属性是否存在
				if(typeof  args.age == "number"){......}			
			}
		5.  方括号表示法 与  点表示法
			方括号表示法的优势：
				1.  可以通过变量来访问属性：
					var  na = "name";
					alert(person[na]);   "Jack"
				2.  如果属性名中包含语法错误的字符 或 使用的是关键字 、 保留字，可				     
					使用方括号表示法：
					person["first name"] = "Bob";

			通常 除非必须使用变量来访问属性，否则建议使用点表示法
	B.  引用类型
		1. 当一个变量向另外一个变量复制引用类型的值时，会复制一份指针给新的变量，而该指针 指向堆中的一个对象。
		   两个变量 引用同一个对象，所以改变其中一个变量另外一个变量也跟着变化。
		2. 函数传参也和变量复制是一样的（对于 值变量 和 引用变量），而参数只能按值传递（引用类型的值就是 所指向对象的指针）
		   在函数内部改变引用类型的值，外部对象也会跟着改变。
		3. 根据上述，有特殊情况：
			如： function setName（obj）{
				obj.name = "Jack";
				obj = new Object(); //  ********
				obj.name = "Bob";   //  ********
			}
			     var  person = new Object();
			     setName(person);
			     alert(person.name);
			解释：若没有 * 那两句， 结果为： Jack
			      第一句: 为 obj 重新定义了一个对象
			      第二句：为 obj 定义了一个name属性，且值为： Bob 
			      在函数内部重写了 obj ，这个变量引用的就是一个局部对象了。局部对象函数结束后立即销毁


3.  Array 类型
	A.  创建数组
		1.  Array 构造函数:  
			               var  colors = new Array();  、 var colors = new  Array(3);   、  
			               var  names = new Array("Jack");  包含一项的数组
 				也可省略   new 
		2.  数组字面量：
			var   colors  =  ["bule","red"];
			var  values = [1,2,];   在IE8之前的版本会认为是一个有 3 项的数组，而在其他浏览器会认为是 2 项
			var  options = [ , , , , , ];   ....之前可能会认为是  有 6项的数组，其他  5 项
		3. 数组的 length ，可以修改 。 如： colors.length  = 4;  长度增大则，为 undefined。 
			若   colors[colors.length] = "black"; 则会增加数组从长度。
			若   colors[999] = "blue" ;   会增加数组长度，但没有明确数组项的值为   undefined
			数组最多存 2 294 967 295 个项。若数组初始大小与这个上限值接近，可能会导致运行时间超长的脚本错误

		（*******以下之后要补充） 
		4. 检测数组
		       书中原文： 
			    instanceof   的问题在于，它假定只有一个全局执行环境。如果网页中包含多个框架，
			那实际上就存在两个不同的全局执行环境，从而存在两个不同版本的 Array  构造函数。
			如果你从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中
			原生创建的数组分别具有各自的不同构造函数。

		       新增   Array.isArray( value )    最终确定 某个值（即：value） 是不是  数组
	B.  转换方法
		toLocaleString() 	toString()		valueOf()
				
		alert(Array); 	因 alert 要接受字符串参数，所以会在后台调用  toString 或 toLocaleString 方法
		toString() 	将数组以 逗号 分隔拼接成一个 字符串 
		
		valueOf() 		valueOf() 方法返回 Array 对象的原始值。
				该原始值由 Array 对象派生的所有对象继承。
				valueOf() 方法通常由 JavaScript 在后台自动调用，并不显式地出现在代码中。
		toLocaleString(原文)
			       该方法 返回与 toString() 、valueOf()  方法相同的值，但也不总是如此。
			 当调用 toLocaleString() 方法时，他也会创建一个数组值以逗号分隔的字符串。
			 而与前两个方法不同之处在于，为了取得每一项的值，调用的是每一项的  toLocaleString()方法，
			 而不是  toString() 方法。 （高三  P89）
	********	join() 方法，则可以使用不同的分隔符来构建这个字符串，只接受一个参数，即作为分隔符的字符串，然后返回字符串
		如： colors.join("||")	    red||blue||green.
		不传值 或 传入 undefined，则使用逗号作为分隔符。在  IE7 及跟早版本会以  "undefined" 作为分隔符
	***（如果数组某一项的值是 null 或 undefined，在其上方法会以空字符串表示）
	C.  栈方法  和 队列方法
		栈： 最新添加的项最早被移除，后进先出。尾加尾删
			Array.push(value);   		从数组末尾加入元素，返回数组的长度
			Array.pop();		删除数组末尾的一项元素，返回删除的项
		队列: 队列末端添加项，列表前端移除项，尾加 头删
			Array.shift();	移除数组第一项并返回该项
			（  Array.unshift(value);   添加元素至数组头部   ）
	D.  数组重排序
		Array.reverse();		数组反转
		Array.sort();		数组排序（默认从小到大排序）
		   	 sort 	可以接收一个比较函数作为参数，比较函数接收 两个参数
		如果第一个参数应该位于第二个参数之前就返回一个负数；  ( 之前  即指 索引靠前 （小） )
		       两参数相等，返回0.
		       第一个参数应该位于第二个参数之后就返回一个正数
		 
		如：function compare( p1, p2 ){ 	//  想要从小到大排序
			if( p1 < p2 ){
			       return   -1;
			}else  if (p1 >) {
			       return    1;
			}
		}
		简化：  function   compare (  p1 , p2 ){
			//   负数    >>>  确定原先数组元素位置 
			//   正数    >>>  交换元素位置
	
			return  p1- p2;      
			//  p2   大于   p1  时确定位置 
			//  p2   小于   p1  时交换位置 
			}
			arr.sort(compare);
	E. 数组操作方法:  contact()   、 slice() 、  splice() 
	     contact ( ) 方法	基于  某个数组的所有项  创建一个新的数组。
		colors.contact( value );   可加参数（可加多个，以逗号隔开），即在原来数组的基础上在数组末尾加上这些 元素。
		若 value 中 含有数组，则将数组中的每一项 一一加入到 复制的数组后面。
	     slice( ) 方法	基于某个数组的一项 或者  多项来创建数组
		slice( ) ，方法可以   没有参数、一个参数、两个参数

		 无参     	   >> 	则只是简单的复制一份，后返回。
		一个参数 	   >>	截取  该参数到数组末尾的一段
		两个参数	   >>        colors.slice( a , b);    a:  所要截取数组的开始端， 
				b：所要截取数组末端 （且不包括），返回所截取的数组。
		若 slice  方法中含有 负数，则加上数组的长度。
		若  初始位置  大于  结束位置，则 返回空数组 
	       splice()  方法
		删除： colors.splice(0,2)   要删除 第一项的位置    和  要删除的个数，返回删除项
		插入：需要三个参数， 1 > 起始位置； 2 > 删除个数；  3  > 插入的值，可多个以逗号隔开
		替换： 删除后 再 插入  ==   替换		

	F.  位置方法    >>    	查找数组元素的位置
		indexOf( )   、 lastIndexOf() 
			均可有俩个参数： 要查找的项   和  （可选）查找起点，
			均返回元素在数组中的位置（即索引）
			这两方法 与数组中的每一项比较时，会使用 全等操作符，必须严格相等。
		lastIndexOf () , 从起点位置往前找、或数组末尾往前找

		例子：	(只讲一些特殊的例子)
			var  num = [1,2,3,4,5,4,3,2,1];
			num.indexOf( 4，4 )；    //  5    （以  5  这个元素 开始向后找 4，即会找较后面的    4）
			num.lastIndexOf(4，4);   //  3	   (以  5  这个元素开始向前找 4 ，即会找到较前面的 4 )
	G.  迭代方法
		ECMAScript  为数组定义了  5 个迭代的方法，	
		    每个方法接收两个参数：  1.   要在每一项上运行的函数，该函数含有三个参数， 数组项的值、 该项在数组中的位置、 数组对象本身
				          2. ( 可选 )运行该函数的作用域对象 — 影响 this 的值。
		every( );  		对每一项运行函数，函数对每一项返回 true，则该函数整体返回 true
		filter( );		对。。。函数，返回该函数会返回 true 的项组成的数组
		forEach( );		对。。。函数，没有返回值
		map( );		对。。。函数，以函数每次返回的结果 组成的数组  作为 返回结果
		some( );   		对。。。函数，只要有一项返回 true， 则该函数返回 true 。
		（详解见：高三  p96 ）
	H.  归并方法
		reduce( );   和   reduceRight( );
		reduce( )  从数组的第一项开始，逐个遍历； 而   reduceRight( )， 从数组最后一项开始，逐个遍历
	      *******     该函数的返回值 会返回给下一项的 第一个参数，直至没有下一项 后 返回最终结果。
		两个函数  接受两个参数：  
		1. 每一项所要调用的函数，该函数接受  4 个参数   >> 前一个值、当前值、项的索引 、数组对象
		2.  （可选）作为归并基础的初始值
		
		如： 	返回数组元素总和 
			var  values = [1,2,3,4,5];
			var  sum = values.reduce( function( prev, cur, index, array){
				retrun  prev+cur;
			})
	3-1.  Date 类型
		1.  Date 类型保存的时间精准到 1970年 1月 1号 前后 1亿天
		2.  创建 Date 类型对象：  var tim = new Date();   必须传入相距 1970/01/01/24:00 的毫秒数，当然也可传入其他格式的字符串。
		3.  Date.parse（）接收一个表示日期的字符串，返回相应的毫秒数，ECMA-262 没有定义该方法应该支持哪种日期格式，通常因地区而异。
		    而在创建 Date 对象时，也接收 这样的字符串。如：var someDate = new  Date（"May 25,2004"）;(高三 P99 )
		    **如果 日期参数超出 31，部分浏览器会 对月份进行进位（如：IE），而有些浏览器会使用当时的日期（Opera浏览器），而Chrome会显示无效值。
		4.  Date.UTC()
			与 Date.parse()一样返回相应的毫秒数，Date构造函数也可直接使用这样的字符串直接进行创建对象，但传入的参数有所不同
			传入： 年份、月份（以 0开头为一月份）、哪一天（几号）、时、分、秒、毫秒
			年份 与 月份 是必须，几号 若未填则自动为 1 ，其他未写入则为 0 ；

		5.  var now = Date.now(); 表示调用该方法的时间，可以使用该方法放置 调用函数的前后，获取函数运行的时间
		6.  有些浏览器不支持，可改写为  var now = +Date.now() 便可使用。
		7.  Date 类型重写的 toLocalesString() 、toString()、valueOf() 方法
			toLocalesString() 和 toString() 在不同浏览器中显示不同格式 （详见 高三 P101）
			而对于 valueOf() 方法，返回的是毫秒数
		8.  日期格式化方法
			toDateString()   	实现格式 星期几 、 月、 日、 年
			toTimeString()	 	时 分  秒 和时区
			toLocaleDateString()	特定区域的 第一种格式（上述第一种）
			toLocaleTimeString()  	......
			toUTCString()		以特定的形式实现格式完整的 UTC 日期
			toGMTString() 		与 toUTCString() 等价 ，但建议 使用toUTCString()（UTC 没有时区偏差下的日期值）
		9.  (高三 P102 获取日期部分内容  )
	3-2.  RegExp 类型 
	     1.	ECMAScript通过 RegExp类型来支持正则表达式。   
		var  expression = /pattern/flags;
		pattern 模式，可以包含字符类、 限定符、分组、向前查找以及反向引用。
		flags 可带一个或多个 标志，标志用以标明正则表达式的行为。
		标志： g（全局模式）、i（不区分大小写模式）、m（多行模式，当匹配之一行末尾时，决定是否换行继续匹配）

	     2. 元字符
		在模式中有可能需要用到元字符（  包括： []  {}  \  ^  $  ()  ?  *  + .  ）
	     3. 创建正则表达式
		a.  字面量形式创建
			var pattern1 = /at/g;			var pattern2 = /[bc]at/g;
		b.  构造函数创建（需要两个参数，这两个参数都为字符串，前者表示模式，后者表示标志符）
			var  pattern1 = new RegExp("at","g")	var pattern2 = new RegExp("[bc]at","g");
		c.  由于RegExp构造函数的模式参数是字符串，所以在某些情况下需要对字符进行双重转义。所有元字符必须双重转义。
		    解释： 字符 \ ，在字符串中表示："\\",而在正则表达式字符串中表示："\\\\"
		    如：  /\[bc\]at/（字面量形式）   等价于  "\\[bc\\]at"（构造函数 字符串形式）
		d.  正则字面量 与 RegExp构造函数创建的正则表达式 区别
			例子：
				var re = null;
        			for (let i = 0; i < 10; i++) {
            				re = /cat/g;
            				console.log("forFirst " + i + " :" + re.test("catastrophe"));
        			}
        			for (let i = 0; i < 10; i++) {
            				re = new RegExp("cat", "g");
            				console.log("forSecond" + i + " :" + re.test("catastrophe"));
        			}
		    	第一个循环体内的正则表达式，实际上只为 /cat/g 创建了一个 RegExp实例。
			由于 实例属性 不会重置（属性中含有：lastIndex 下一次匹配项的字符位置）第一次找到了"cat",第二次继续往下找失败，第三次又重新开始
			
			第二个循环使用RegExp构造函数在每次循环中创建新的正则表达式，所以每次都是 "cat"
			
			但 ECMAScript5 明确规定，使用正则表达式字面量必须像直接调用 RegExp构造函数一样，每次创建新的RegExp实例。
			只有  IE9+  Firefox4+ 和 Chrome 做出了修改。
	
	     4. RegExp 实例属性
			RegExp 的每个实例都具有下列属性：
			global： 	布尔值，是否设置了 g 标志
			ignorecase：	。。。。。设置了 i 标志
			lastIndex	
			multiline	
			source：		按照字面量形式返回； 如:var p1 =  RegExp（"\\[bc\\]at","i"）;  p1.source = "\[bc\]at"
	     5. RegExp 实例方法		
		exec()方法， 专门为 捕获组而设计
		a. var result = pattern.exec(text);   pattern: 正则表达式  、  text：应用正则表达式的字符串
		   返回一个数组 Array 实例， 另外包含两个属性： index：匹配项在字符串中的位置（0开头）	input： 应用正则表达式的字符串
		   返回的数组，第一个元素存放 所匹配到的字符串，第二个元素存放第一个捕获组的内容，第三....第二个..内容。
		   对于正则表达式是否使用全局模式。如果未使用，则在同一个字符串多次调用 exec()方法始终返回第一个匹配项。
		   如果使用全局标志 g ，每次调用exce()方法会在字符串中找新的匹配项。（高三  P106）
		test()方法 接受一个字符串参数，有所匹配返回 true ； var result = pattern.test(text)
		
		toLocaleString()  和  toString() 方法返回正则表达式的字面量，与创建正则表达式的方式无关
		RegExp( "\\[bc\\]at","gi")  		pat.toString()  =  /\[bc\]at/gi (使用valueOf（）方法也是这样的结果

	     6. RegExp 构造函数属性
		 这些属性使用于 域 中所有的正则表达式，基于所执行的最近一次正则表达式操作而变化
		 1.  有两种方式访问  长属性名  和 短属性名 （但 Opera 除外）
		  input （长属性名）	$_    	最近要匹配的字符串
		  lastMatch		$&	最近一次匹配的项
		  lastParen		$+	最近一次捕获组
		  leftContext		$`	input 字符串中 lastMatch 之前的文本
		  rightContext		$'	。。。。。。。。。。之后的文本
		  multiline		$*	是否使用多行模式  （IE Opera 没有此属性）
		  var pat = /cat/g;  pat.test(str);
			RegExp.input  == RegExp.$_
			RegExp.lastParen  == RegExp["$+"]
		其他属性：
			RegExp.$1 第一个匹配的捕获组，......第九个匹配的捕获组
	3-3  function 类型
		1.  所有函数都是function的实例，函数是对象，函数名是指向函数的指针。
		2.  两种使用函数的方式：
			a.  函数声明：
				function sum(n1,n2){
					return  n1+n2;
				}
			b.  函数表达式
				var sum = function(n1, n2){ return n1+n2; };  //有个分好，类似于赋值变量
		     函数声明提升，即 在 函数声明的代码之前可以调用函数。  	而函数表达式不行。并且 也会警告意外标识符。
		     且两者只有这一区别。
		3.  函数也可赋值给其他变量，  如： otherSum = sum;   两者没有关系，只是都指向同一个函数。
		4.  函数没有重载，因为一旦使用同样的函数名，就相当于该 变量 指向另外一个函数。
		5.  函数也可以作为一个值来使用，可以作为参数，也可作为结果（如： return的结果）
		       作为参数：
			 function cal(fun,ele){  return fun(ele);}
			 函数名带括号，表示调用
		       作为结果：

			2.  将一个带有一个已经传递了实参的函数赋给其他变量（传递了实参必然已经执行，已经执行传递的只有返回结果，而这不是我们要的）
				所以有了下列： 返回的是一个函数，而该函数 接受了 包含该函数的 参数。
		
			  对于函数的 sort() 方法中的函数（arr.sort(compare)）;(compare  函数名)
			  因为普通的 sort方法 只能比较数字，而不能比较 元素的其他属性
			  function create( propertyName ){  //  propertyName 元素其中的一个属性
				return fun(obj1,obj2){
					var v1 = obj1[propertyName ];
					var v2 = obj2[propertyName ];
					//再进行比较  v1  v2 
				}

				}//  因为返回函数，而 sort 所需要的参数就是函数

			  arr.sort(create("age"));
		6.  函数内部属性
			函数内部有两个特殊对象：  arguments  、 this
		    1.  arguments 不解释，但他有一个 callee的属性，是一个指针，指向拥有这个 arguments 对象的函数，所以 arguments.callee 等价函数名。
		        特别是在  为求阶乘的函数， num* arguments.callee(num - 1); 
			(因为考虑函数会赋值给其他变量，而且本身函数名可能会指向其他函数)，不会使函数的执行与函数名紧紧耦合在一起
			
		    	this
			（高三  P 114）
			函数（函数名：func ）体内的 this，如：this.color(函数体内)；函数若没有赋值给其他对象属性，那指的是 全局的 color，
			若赋给其他对象属性，this 会指向该对象。但 该对象属性指向的函数 与 func 所指向的是同一个函数。
		    2.  caller  （Opera 早期版本不适应）
			function inner(){  
				alert(inner.caller);   //caller  保存着调用当前函数的函数引用
				//  inner  可用 arguments.callee  代替实现松散的耦合性
				//  严格模式下 ： arguments.callee 会发生错误。不能  为 caller属性赋值	
			}
		7.  函数属性和方法
		    1.  每个函数有两个属性：  length    prototype
			length  	命名参数的个数
			prototype 	prototype保存了它们所有实例方法， toString()  valueOf() 也都在其中，不过可用通过各种对象实例访问。
		    2.  每个函数有两个方法：
			 apply()    call(),  在特定的域中调用函数

			apply() 接受两个参数，一个是在其中运行函数的作用域，另一个是数组
				function sum (num1,num2){ return num1+num2};
				function othSum(num1,num2){  return  sum.apply(this,arguments) ;};

			call()   和 apply 一样，不过参数必须是 一个一个列举出来。	  sum.call(this,num1，num2)；
			函数中  传入  this 作为 this 值（全局中，所以是 window对象）  // 这句有点不懂

		*****   理解：
				上述函数中的  this，指的是函数本身，这样 arguments 可以直接向 this 取得参数
			
			**********  真正用途： 扩充作用域
				window.color = "red";
				var o = {color: "blue"};
				function saycolor(){ alert(this.color); }
				sayColor.call(o);  	// blue  this 指向 o 对象
				sayColor.call(this);	//  red
			//  可以不赋值给 o 对象属性（o.say）后在调用 o.say() 的方法
		bind() 方法
			创建一个 函数实例 ，其 this 值会绑定到  传过来的值（例如下面的  o ）
			var objSayColor = sayColor.bind(o);

	3-4.  基本包装类型(ECMAScript 提供了三个特殊的引用类型：Boolean、Number、String)
	      如： 
			 var s1 = "string";  
		 	 var s2 = s1.substring(2);
		//  基本包装类型：基本类型的引用类型 （Boolean	Number String 等）
		//  按理基本类型值不是对象，没有属性，更没有方法。
		//  在第二句代码，后台会自动完成下列步骤：
		//		1)  创建String一个实例	 	2） 在实例上调用方法		3）销毁这个实例

		var str = new String("string");  创建 String类型实例
	  a.  引用类型 与 自动创建的基本包装类型的区别
		使用new操作符创建的引用类型实例，在执行流离开当前作用域之前都一直保存在内存中。
	        而自动创建的基本包装类型的对象，只存在于一行代码的执行瞬间，然后立即被销毁。为
	        
	  b.   Object构造函数也会项工厂方法一样，根据传入数值参数返回相应基本包装类型的实例。如：
			var obj = new Object("string ");//   传入字符串，返回 String 的实例。传入数值，Number。传入布尔值参数..
        		alert(typeof obj);    		//   object
			alert（obj instanceof String）	//   true
	  c.    使用 new 调用基本包装类型的构造函数（var o = new Number（value）），typeof o = object
		直接调用同名转型函数（var o = Number（value））。typeof  o = number
		***************   对象在布尔计算时 始终为 true，除了 null 。因为用 new 创建出的实例是对象，所以必须注意。
	  d.   	Boolean  
			valueOf()	返回基本类型值 true、false
			toString() 	返回字符串  "true"  "false"
			newBoolean  （使用new 创建的布尔对象实例）； ( newBoolean  instanceof Boolean ) >>>> true
			valueBoolean （直接设置布尔值的基本类型） ； (valueBoolean  instanceof Boolean ) >>>> false
	  e.	Number
			valueOf() 	返回数值
			toString() 和 toLocaleString()	返回字符串
 		Number类型格式化字符串的方法（ Number类型 ）
		    num.toFixed(2) (指定小数位)  10 >>>  10.00
		    	若 num 本身小数位，一般浏览器会四舍五入，而 IE 负数会向大的取，正数向小了取
		    num.toExponential(1)
			e表示法，参数规定小数位数
		    num.toPrecision() ，可能返回  fixed格式，也可能返回  指数格式(e表示法）。接受参数，所有数字的位数。
	  f.   不建议直接实例化 基本类型。因为分不清是对象 还是基本类型数值。
	  	

	  g.   String 类型
		1. 基本字符串值都含有 length 属性，返回字符串长度，无论是否是 双字节字符（例如汉字），每个字符也仍然算一个字符
		2. 字符方法
			1）str.charAt( num );  		// 返回指定位置的字符 （以 0开始）
			2) str.charCodeAt( num );	// 返回指定位置字符的字符编码
			3) str[0]  			// 也可使用方括号访问字符（在 IE7 之前版本显示 undefined）
		3. 字符串操作方法
			1） contact
			var strr = str.contact(v1,v2..);	// 链接字符串，可有多个参数，且原字符串不变。
			2） 三个基于 某个字符串 创建新的字符串 	
				slice()   substring()  substr()   都接受两个参数
			    a.  slice  和 substring  裁剪字符串并返回，第一个参数 起点，第二个终点且不包括，若无该参数，截止末尾）
			    b.  substr  第一个参数起点，第二个 个数。
			    c.  若上述方法 有参数是负数
				 slice  和  substr 会将第一个参数加上字符串长度作为第一个参数，若出现后者参数大于前者，会自动反一下
					substring 会 将 0 作为该参数
			
			   
		
		4. 字符串位置方法   var str = "hello world";
			1) str.indexof("o"); 		//  开头向后搜索val(字符串)， 该方法返回 val 在字符串中的位置 4。
			2）str.lastIndexof("o");		//  以结尾作位置向前搜素，返回 位置 7。
			3）str.indexof("o",6)		//  以字符串 6 的位置向后搜索，	返回 7
			4）str.lastIndexof("o",6)	//  返回  4
			4） cotact

		5. trim() 方法
			var strr = str.trim();  // 删除前后置的空格
			Chrome8+  Firefox3.5+   Safari5+ 还支持非标准的 trimLeft  trimRight ，单独删除前面 或 后面的空格
		6. 字符串大小写转换
			toLocaleUpperCase()   toUpperCase()   toLocaleLowerCase()    toLowerCase() 
			建议使用 地区方法

		
4 .  数据类型
	A.  5 种基本数据类型： Undefined 、Null、Boolean、 Number 、 String  。  object  （复杂数据类型）
	B.  typeof  操作符可以返回下列字符串： undefined、boolean、string、number、object、function
	     对于已声明且为初始化的 变量 ，  typeof  变量名  = “undefined”
	     且 对于 为声明的变量	       typeof  变量名  =   “undefined”  
	boolean  类型
	Number类型  转  boolean类型： 0 和 NaN >>> false, 其余  都为 true
	object   类型  转  boolean类型：   null   >>> false,  其余为  true
	undefined		              ：  只有  false

5. number 类型
	A.  过大的数字用   e 表示法（科学计数法）
	B.   0.1 + 0.2   不等于  0.3 （浮点计算的通病） ；    0.15 + 0.15 = 0.3	
	C.   数字范围： 
		能够表示的最小数值：   Number.MIN_VALUE     =  5e-324;(显然对于的是 精度 )
		最大的数值             ：   Number.MAX_VALUE    =   1.797691348623157e+308
		如果在 js 脚本计算中超出两者的精度范围：就会转化成   Infinty（正数）， -Infinty （负数）
	D.  NaN  :  表示要返回数值的情况下未返回数值，（未返回数值  就会返回  NaN）
		NaN  与任何数值  计算 结果都是  NaN
		isNaN(  value );   判断 value  是否是  NaN，是返回  true；
	E.  数值转化
	         字符串 转化为  数值
		Number( value );    转化为数值 。 value ：  字符串
		parseInt( value, level );
		level:  进制。  
		如： parseInt( "10",8 )  > (把 "10" 以 8 进制为基地  转化为  10 进制) ，结果为： 8
		且在没有第二个参数的时候，会自动以十进制为基地进行转换。
		如果 level 为 16，则字符串中的  0X 可以省略（一个坑）		

	          两者在解析字符串的时候，如果字符串的第一个字符 不是数字字符 也不是  负号，
		Number  parseInt 会将其转化为 NaN，且在第一个是空格的情况下，
		Number 转化为 0  ；   parseInt  转化为  NaN
		
	          parseFloat(value )
		该方法没有 第二个参数， 只以十进制进行转换，且自动省略前面的 0，
		解析字符串会一直解析到  第二个小数点 或者  字符串末尾
6.  String
	String 类型用来表示     由 0 个或 多个 16位 Unicode 字符 组成的 字符串序列
	A.  特殊字符字面量（也叫 转义序列）
		 如： \xnn   、以 16进制代码 表示   一个字符，（\x41） 表示 ‘A’
		        \unnnn  以 16进制代码 表示   一个 Unicode 字符	
	B.  length 属性
		如果字符串中含有  转义字符 也算进    length  里，
		如果字符串中含有   双字节字符 ，  length  的精准度会有问题

	C.  数值的 value.toString ( level)   方法，
		对于 Null   和  Undefined  没有该方法
		level ：  将 value 以十进制为基地  转化为  level 进制的数

	         String(value） 会自动调用  toString ()  方法，
		String(null)  = "null";
		String(undefined) = undefined";
	D.  字符串 转换为  布尔值
		字符串非空  转化为   true,其余为  true


	
7.  操作符  （用以操作数据值）有： 算术操作符、位操作符、关系操作符、等号操作符
	A.   x += x；    x=+x；
	B.   object() 类型的数值   转换为其他的  类型时，一般操作： (1) 调用对象的  valueOf()，取得一个可操作的值，然后对其执行向其他操作。
	      如果上述 (1) 操作返回的是  NaN ，则执行   (2) 对对象调用 toString() 方法，在如 对一般类型的值一样进行 相应许需要的转换
	C.  位操作符
		按 内存中表示数据 的 位 来操作数据。
	         1. ECMAScript  中的所有数值都以  IEEE-754  64 位格式存储，先将 64位的值转化位 32 整数，然后对其操作，最后又转化为  64位
                         2.  第 32 位 表示 符号位，其余几位 用以表示数值。若没有满足 32 位  ，则在有效数字之前  且在符号位之后， 添  数字  0；
	         3.  负数 是以 二进制补码的形式进行存储的
		补码： 原码 （负数的原码  即 绝对值的原码 前 加一个负号 ，如：-5 = -101； 其中 剩余位数，自行 脑补）
		           在原码的基础上除符号位以外   进行反码（0 变 1， 1 变 0），后加  1

	         4. 按位非 （  波浪线 表示： ~ ）
		将其二进码 取反码（且记住： 是数据  以 内存中位的表示法，来执行这些操作）   
		::: >>>>   负数的二进码存储形式是  原码的补码
		var  num      =   25；
		var  num2    =   ~ num；   //  num2 = -26 
		按位非    =   原来的值   取其负值   后 减一   ；（可根据上述例子）

	         5.  按位与   （ & ）
		两者二进码进行 各位数进行 比较， 都为 1 则是 1；
		25 = 00000  00  00 0       0001  1001
		3   = 00000  00  00 0       0000  0011；
		所以两者 执行 按位与  00000  00  00 0       0000  0001 ，结果为 1；
	         6.  按位或  （ | ）  
		两者 二进制码 进行比较 ，有  1 则 1；
	         7.  按位异或  (  ^ ） 
		……   		， 有 一个 1 才是 1；

	         8.  按位或    与   按位异或  比较，相同的数值比较，不同的 按位操作符。
		前者的结果 的绝对值一定比后者的结果的绝对值大（可自行理解）

	         9 .  左移    （符号： <<   ） 指的是  有符号左移
		   将数值位全体向左移，后面 补  0； 左移  n  位 ==  该数值（原十进制数） 乘以   2的 n 次方
	         10.   右移    （符号： >>  ）  有符号右移
		   将数值位全体向右移，右边以 符号位 来填充
		无符号右移  （符号  >>>  ）
		    对于正负数一样，都会忽略   符号位 ，都将其 二进制码 看成是 正数的码。
	 	    所以，在对 负数执行  无符号右移时，会出错。
		    因为负数的二进码（原码的补码），看成 正数的 二进码会 非常大，然后进行 向右移，结果依然是错的。
	
	D. 布尔操作符
		
		逻辑非（ ！）、逻辑与（ && ）、逻辑或 （ || ）
		object  数值  在  布尔操作符中  会被认为是  true
           	         逻辑与： A  &&  B                能拖延返回就拖延返回
		若   A  为对象，则返回  B，
		若   B   为对象，且在  A 转换为布尔值时 是 true 的情况下，返回  B
		若   A  与 B 皆对象，则返回  B
	    	逻辑与中不能出现   未定义的变量， 不然会发生错误
	        逻辑或：  A  ||  B 	能返回  就 返回
		如果第一个操作数能返回则返回，不会再理会 第二个操作数，所以如果第二个操作数 是 未声明的变量
		若要在 逻辑或中 返回  null  undefined   NaN ，则要两个参数都是 unll    undefined   NaN
	E.  乘性操作符：  乘法、 除法、求模
		乘法：	
			1.  如果乘法中含有  NaN  则，这一系列的计算结果  就是  NaN
			2.  Infinity  与  0  相乘  ，结果为   NaN
			3.  Infinity   与  除 0 以外的数字相乘，结果 为  Infinity  或  -Infinity
		除法：（\）
			1.    即  数值 和 Infinity  被 0 除 ，结果为  Infinity  或  -Infinity
			2.    0  被 0 除，结果为 NaN；    Infinity  被  Infinity 除 结果为  NaN
			3.    0 被 任何 非0 除，结果都为  0；
			4.    Infinity  可以是  无限大，所以  Infinity 除以 任何数值（除了  0 和 Infinity系列），任然为  Infinity	
			       Infinity   作为 除数，被除数 为任何值（ 除了  0 和 Infinity系列），结果都为 0；
		求模（又称： 取余  %）
			1.   分子   为  Infinity  结果都为  NaN；  包括 分子  分母 都为 Infinity 的情况
			2.   分母  为    0       结果为  NaN
			3.   分子为  0  结果  都为 0； （且 排除  2  的情况）	
			4.   分母   为  Infinity ，分子 不为 Infinity 和 0，结果都为 分子。
	F.  加性操作符：加法操作符   和  减法操作符
	       共有： 在有  Infinity  和  -Infinity（当然 减去  Infinity 也是）  的情况下，结果为  NaN
		  在需要涉及到将  null  或  undefined 转化为数值时，  null 和  undefined  都转换为   0；
		  在 谷歌浏览器中 ，对 未声明的变量进行操作会报错
		加法：
			1.  （+0）+ （+0） = +0；
			2.  （-0） +  （-0） =  -0；
			3.  （+0） + （-0） =  +0；
			与普通的 正负数算法一样
		注意：  一般算术是从左往右，所以在有字符串的情况下 
			var   num = “a”+ 3+4；//    “a34”
			从左往右，会进行字符串拼接，所以  a 将 3 拼接成字符串，后又将 4 拼接成字符串。
		减法：
	G.  关系操作符：  <  、 > 、<= 、  >= 、
		1.  含有数值 进行比较，且都需转化为 数值进行比较，且从左往右。
		      所以，注意多个  关系操作符的出现
		2.  字符串之间的比较 ，比较两个字符串之间的字符编码值
		3.  含有  对象对类型，则需要使用  valueOf()  或  toString() 方法进行转换，相应的需要。（即看另外一个比较数）
		     如果两个都是对象类型（有待考究）
		4.  在  字符串 与 未初始化的变量进行比较时，返回的 都是  false	
		5.  与  NaN  的一系列操作都是   false
		6.  boolean  值 都会先转换为   1 或 0 ，再继续进行比较。（在算数计算中也是如此）
		
	H.  相等操作符：   相等： ==   、  !=  、     全等 ：===  、 !==
		1.  unll  与 undefined  相等， 不全等
		2.  NaN  与  NaN  不相等，更不全等
		3.  与 NaN 的一系列操作都为 false
		4.  全等 必须 一模一样，类型  、数值
		5.  undefined  和   null   都不等于  0
		6.  对象 与 对象，必须指向同一个内存  或 是被另外一个对象所赋值的

	I.  条件操作符：  三目运算符	
	J.  赋值操作符： 一系列就不说了，如：  /= 、 %= 、 >>= 、<<=（左移赋值） 、>>>= 、（无符号右移）
	K.  逗号操作符：  在一些基本分隔除外，逗号还有一些功能。
		           var  num  = 12，3，4，5；  //  会将最后一个值 赋给  num 		
	L.  label  语句 
	 	如：  start: for(var i =0; i<13;<i++){
			for(var j  =0 ; j<10 ; j++）{
			if(i==2 &&  j==3){
				break  start;  // 对外层 对于使用了 start 标记的 循环进行  停止；  （while  一样受用）
			}}		
			};
		start  用以标记该  for 循环，好在内层循环中可以  使用 continue  或  break  对该循环操作
	M.  with 语句  
		with（obj）{
		var a = href；
		//   with 里面的变量，首先会在 所在的局部环境中找，若没有则会 在  obj 对象中找
		}
		var  a = obj.href;   //  与上述意思一样，且是在满足上述情况下
	N.  switch  语句
		case： 25:
		case： 35:  alert（”25 和 35“）；break；  // 合并
		js  中 switch 语句与 普通编程语言的 不同：
		1.  switch（expression ） ； expression  可以是任何 类型的值 (字符串  、 对象 )
		2.  case： value ； 	   value 可以是变量， 也可以是表达式
		3.   例子：
			var num =1 ；
			switch（true）{
			case： num > 1；
			           alert（）；	
			           break；		
			default：
				alert（）；
			}
		4.  只要有满足   expression 的  case (当然有break，满足条件就会结束)  就行 （ 高三   p61 ）
	O.   函数参数
		1.  ECMAScript 中的参数 在内部用一个数组来表示，函数内部使用  arguments  对象来访问这个数组。例如： arguments[0]=第一个参数，以此类推
		2.  一般条件下  函数预备需要多少个参数，最多传入与之相等数量的实参进来。
		3.  arguments 数组元素 是 参数是同步的，即两者的值是联通的，虽然它们不是指向同一个内存。
		    前提是  arguments 数组中调用的数组元素时，函数调用时 传入进来了与 数组元素 对应的实参。
		4.  arguments 数组的长度由参数（传入的实参）所决定，
				（在形参数量大于实参数量的条件下）  没有传递值的命名参数将自动赋予 undefined （使用 arguments 改变值没用）
		5.  在严格模式下，不能修改 arguments 中的值，也不能与 参数 相联通

8.  作用域 与 内存 
	A.  检测类型
		1.  检测基本类型使用  typeof 操作符，可检测基本数据类型，typeof 检测对象 只会返回 object
		2.  在检测引用类型对象时，instanceof  用以检测 它是什么类型的对象（有  Array 类型的对象、RegExp类型的对象）
			如：（ persons  instanceof Array ），如果用instanceof检测除 object以为的值或变量，会返回 false
		3.  所有引用类型的值都是  object 的实例，包括 Object构造函数
		4.  在ECMA-262规定任何内部使用 [call]方法的对象，使用 instanceof 检测该对象都会返回 function。
		    因为正则表达式用了 [call] 方法，所以在  Safari5及之前版本 和 Chrome7及之前版本 使用 typeof 检测 正则返回 function
		    而在  IE 和 Firefox  使用 typeof 检测正则 返回 Object
	B.  执行环境 与 作用域
		执行环境： 执行环境定义了变量 或 函数有权访问的其他数据
		1.  每个执行环境都有一个与之相关联的 变量对象， 环境中定义的所有变量 和 函数 都保存在这个对象中
		2.  某个执行环境中的代码执行完毕后，该环境被销毁，保存其中的变量 和 函数定义 也被销毁。（全局 会在关闭网页 或 浏览器 时销毁）
		3.  每个函数都有自己的执行环境，执行时，压入 环境栈，执行完毕后 弹出 环境栈，把控制权返回给 之前的执行环境。
		4.  当代码在执行时，会创建变量对象的一个作用域链。作用域链：保证对执行环境的数据的有序访问。 
 		5.  作用域链中包含与之相关联的所有执行环境，在寻找变量 或 函数 时，会一级一级往上找。

	C.  延长作用域链
		有些语句可以在作用域链前端临时增加一个变量对象，在此举例： try-catch   、 with
		1.  with  会将指定对象添加到作用域链中
		2.  catch 语句会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明。
		3.  在函数中的 with 语句， with 语句所定义的变量，会成为执行环境的一部分，所以可以用于函数当中。
		4.  高三 P75，关于 catch语句所捕捉得错误对象，会被添加到  执行环境的变量对象，而不是 catch 的语句的变量对象中，在 catch 外部也可以
		    访问 该对象（仅仅在 IE8版本 之前）
	D.  没有块级作用域
		1.  在其他编程语言中 像for 、while、if 之类的，由花括号封闭的代码块都有自己的作用域（执行环境）
		    在 这些其中的所定义的变量，会在代码块结束后销毁，而 JS 不会，他会将这些变量 添加到当前的执行环境中。
	E.  变量声明
		1.  声明变量会添加到最近的执行环境中，没有使用 var 或 其他声明的 变量 会被定义为 全局变量。
		2.  要想在 函数中使用 全局变量，且该 全局变量的名字 在函数有定义。但又想在该函数中使用全局变量，可以使用 window.value（value 变量名）

	F.  垃圾收集
		JS 具有自动垃圾收集机制，执行环境会负责管理代码执行过程中使用的内存。
		垃圾收集机制原理： 找出那些不再继续使用的变量，然后释放其占用的内存。垃圾收集器会按照固定的时间间隔（周期性的执行这一机制）
		通常有两个策略：
		1.  标记清除：
		    	当变量进入环境（可以理解为 正在执行的环境中的变量）就标记为“进入环境”，当变量离开环境时
		   	（可以理解为 结束该执行环境，里面的变量不再使用），标记“离开环境”。
			**  有时候回给存储在内存中的的所有变量都加上标记，会去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记
			     的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量。
		2.  引用计数
			当声明了一个变量并将一个引用类型值赋给该变量时，则这个值得引用次数就是 1，如果同一个值又被赋给另外一个变量，则该值加 1 。
			相反，如果包含对这个值引用的变量又取了另外一个值，则这个值得引用次数减 1 。
			*** 对于引用计数会有问题：
				function problem(){
					var objA = new Object();
					var objB = new Object();
					objA.some = objB;
					objB.some = objA;	
				} 
			这里反复引用，对于标记清除而言，这两个对象会离开作用域，这用相互引用不是问题。
			而对于 引用计数，各自的引用次数不会是0，所以不会回收。而导致大量内存不能回收，内存泄漏。
			***  为了防止上述情况发生，最好在不使用时，手动断开原生。  objA.some = null;  objB.some = null;
		3.  IE以前版本的垃圾收集问题：
			256个变量、4096个对象（或数组）字面量和数组元素、64KB的字符串，达到任一个临界值，垃圾收集器就会运行。
			而当 整个脚本变量一直有这么多，垃圾收集器会不断运行。
			****  	IE7 之后有所改变，临界值动态改变，如果垃圾收集例程回收的内存分配量低于 15%，则变量、字面量和数组元素的临界值就会加倍，
				如果回收了 85% 的内存分配量，就回到默认的临界值。
		4.  优化内存
			最佳方式：为执行中的代码只保存必要的数据，一旦不再使用，就将其设置为 null 来释放引用，这个叫做解除引用。
			一般适用于 全局变量和全局对象的属性，局部变量会在他们离开执行环境时自动解除引用。
		




























